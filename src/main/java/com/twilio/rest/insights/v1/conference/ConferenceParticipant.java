/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

package com.twilio.rest.insights.v1.conference;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.twilio.base.Resource;
import com.twilio.converter.Converter;
import com.twilio.converter.DateConverter;
import com.twilio.converter.Promoter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;
import lombok.ToString;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.time.ZonedDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonIgnoreProperties(ignoreUnknown = true)
@ToString
public class ConferenceParticipant extends Resource {
    private static final long serialVersionUID = 181807717782019L;

    public enum CallDirection {
        INBOUND("inbound"),
        OUTBOUND("outbound");

        private final String value;

        private CallDirection(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        /**
         * Generate a CallDirection from a string.
         * @param value string value
         * @return generated CallDirection
         */
        @JsonCreator
        public static CallDirection forValue(final String value) {
            return Promoter.enumFromString(value, CallDirection.values());
        }
    }

    public enum CallState {
        ANSWERED("answered"),
        COMPLETED("completed"),
        BUSY("busy"),
        FAIL("fail"),
        NOANSWER("noanswer"),
        RINGING("ringing"),
        CANCELED("canceled");

        private final String value;

        private CallState(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        /**
         * Generate a CallState from a string.
         * @param value string value
         * @return generated CallState
         */
        @JsonCreator
        public static CallState forValue(final String value) {
            return Promoter.enumFromString(value, CallState.values());
        }
    }

    public enum JitterBufferSize {
        LARGE("large"),
        SMALL("small"),
        MEDIUM("medium"),
        OFF("off");

        private final String value;

        private JitterBufferSize(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        /**
         * Generate a JitterBufferSize from a string.
         * @param value string value
         * @return generated JitterBufferSize
         */
        @JsonCreator
        public static JitterBufferSize forValue(final String value) {
            return Promoter.enumFromString(value, JitterBufferSize.values());
        }
    }

    public enum Region {
        US1("us1"),
        US2("us2"),
        AU1("au1"),
        BR1("br1"),
        IE1("ie1"),
        JP1("jp1"),
        SG1("sg1"),
        DE1("de1");

        private final String value;

        private Region(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        /**
         * Generate a Region from a string.
         * @param value string value
         * @return generated Region
         */
        @JsonCreator
        public static Region forValue(final String value) {
            return Promoter.enumFromString(value, Region.values());
        }
    }

    public enum CallType {
        CARRIER("carrier"),
        CLIENT("client"),
        SIP("sip");

        private final String value;

        private CallType(final String value) {
            this.value = value;
        }

        public String toString() {
            return value;
        }

        /**
         * Generate a CallType from a string.
         * @param value string value
         * @return generated CallType
         */
        @JsonCreator
        public static CallType forValue(final String value) {
            return Promoter.enumFromString(value, CallType.values());
        }
    }

    /**
     * Create a ConferenceParticipantFetcher to execute fetch.
     *
     * @param pathConferenceSid The conference_sid
     * @param pathParticipantSid The participant_sid
     * @return ConferenceParticipantFetcher capable of executing the fetch
     */
    public static ConferenceParticipantFetcher fetcher(final String pathConferenceSid,
                                                       final String pathParticipantSid) {
        return new ConferenceParticipantFetcher(pathConferenceSid, pathParticipantSid);
    }

    /**
     * Create a ConferenceParticipantReader to execute read.
     *
     * @param pathConferenceSid The conference_sid
     * @return ConferenceParticipantReader capable of executing the read
     */
    public static ConferenceParticipantReader reader(final String pathConferenceSid) {
        return new ConferenceParticipantReader(pathConferenceSid);
    }

    /**
     * Converts a JSON String into a ConferenceParticipant object using the provided
     * ObjectMapper.
     *
     * @param json Raw JSON String
     * @param objectMapper Jackson ObjectMapper
     * @return ConferenceParticipant object represented by the provided JSON
     */
    public static ConferenceParticipant fromJson(final String json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, ConferenceParticipant.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    /**
     * Converts a JSON InputStream into a ConferenceParticipant object using the
     * provided ObjectMapper.
     *
     * @param json Raw JSON InputStream
     * @param objectMapper Jackson ObjectMapper
     * @return ConferenceParticipant object represented by the provided JSON
     */
    public static ConferenceParticipant fromJson(final InputStream json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, ConferenceParticipant.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    private final String participantSid;
    private final String label;
    private final String conferenceSid;
    private final String callSid;
    private final String accountSid;
    private final ConferenceParticipant.CallDirection callDirection;
    private final String from;
    private final String to;
    private final ConferenceParticipant.CallState callState;
    private final String countryCode;
    private final Boolean isModerator;
    private final ZonedDateTime joinTime;
    private final ZonedDateTime leaveTime;
    private final Integer durationSeconds;
    private final String whisper;
    private final Boolean agentAudio;
    private final Integer outboundQueueLength;
    private final Integer outboundTimeInQueue;
    private final ConferenceParticipant.JitterBufferSize jitterBufferSize;
    private final Boolean isCoach;
    private final List<String> coachedParticipants;
    private final ConferenceParticipant.Region participantRegion;
    private final ConferenceParticipant.Region conferenceRegion;
    private final ConferenceParticipant.CallType callType;
    private final Integer qualityIssues;
    private final Map<String, Object> properties;
    private final Map<String, Object> events;
    private final Map<String, Object> metrics;
    private final URI url;

    @JsonCreator
    private ConferenceParticipant(@JsonProperty("participant_sid")
                                  final String participantSid,
                                  @JsonProperty("label")
                                  final String label,
                                  @JsonProperty("conference_sid")
                                  final String conferenceSid,
                                  @JsonProperty("call_sid")
                                  final String callSid,
                                  @JsonProperty("account_sid")
                                  final String accountSid,
                                  @JsonProperty("call_direction")
                                  final ConferenceParticipant.CallDirection callDirection,
                                  @JsonProperty("from")
                                  final String from,
                                  @JsonProperty("to")
                                  final String to,
                                  @JsonProperty("call_state")
                                  final ConferenceParticipant.CallState callState,
                                  @JsonProperty("country_code")
                                  final String countryCode,
                                  @JsonProperty("is_moderator")
                                  final Boolean isModerator,
                                  @JsonProperty("join_time")
                                  final String joinTime,
                                  @JsonProperty("leave_time")
                                  final String leaveTime,
                                  @JsonProperty("duration_seconds")
                                  final Integer durationSeconds,
                                  @JsonProperty("whisper")
                                  final String whisper,
                                  @JsonProperty("agent_audio")
                                  final Boolean agentAudio,
                                  @JsonProperty("outbound_queue_length")
                                  final Integer outboundQueueLength,
                                  @JsonProperty("outbound_time_in_queue")
                                  final Integer outboundTimeInQueue,
                                  @JsonProperty("jitter_buffer_size")
                                  final ConferenceParticipant.JitterBufferSize jitterBufferSize,
                                  @JsonProperty("is_coach")
                                  final Boolean isCoach,
                                  @JsonProperty("coached_participants")
                                  final List<String> coachedParticipants,
                                  @JsonProperty("participant_region")
                                  final ConferenceParticipant.Region participantRegion,
                                  @JsonProperty("conference_region")
                                  final ConferenceParticipant.Region conferenceRegion,
                                  @JsonProperty("call_type")
                                  final ConferenceParticipant.CallType callType,
                                  @JsonProperty("quality_issues")
                                  final Integer qualityIssues,
                                  @JsonProperty("properties")
                                  final Map<String, Object> properties,
                                  @JsonProperty("events")
                                  final Map<String, Object> events,
                                  @JsonProperty("metrics")
                                  final Map<String, Object> metrics,
                                  @JsonProperty("url")
                                  final URI url) {
        this.participantSid = participantSid;
        this.label = label;
        this.conferenceSid = conferenceSid;
        this.callSid = callSid;
        this.accountSid = accountSid;
        this.callDirection = callDirection;
        this.from = from;
        this.to = to;
        this.callState = callState;
        this.countryCode = countryCode;
        this.isModerator = isModerator;
        this.joinTime = DateConverter.iso8601DateTimeFromString(joinTime);
        this.leaveTime = DateConverter.iso8601DateTimeFromString(leaveTime);
        this.durationSeconds = durationSeconds;
        this.whisper = whisper;
        this.agentAudio = agentAudio;
        this.outboundQueueLength = outboundQueueLength;
        this.outboundTimeInQueue = outboundTimeInQueue;
        this.jitterBufferSize = jitterBufferSize;
        this.isCoach = isCoach;
        this.coachedParticipants = coachedParticipants;
        this.participantRegion = participantRegion;
        this.conferenceRegion = conferenceRegion;
        this.callType = callType;
        this.qualityIssues = qualityIssues;
        this.properties = properties;
        this.events = events;
        this.metrics = metrics;
        this.url = url;
    }

    /**
     * Returns The participant_sid.
     *
     * @return The participant_sid
     */
    public final String getParticipantSid() {
        return this.participantSid;
    }

    /**
     * Returns The label.
     *
     * @return The label
     */
    public final String getLabel() {
        return this.label;
    }

    /**
     * Returns The conference_sid.
     *
     * @return The conference_sid
     */
    public final String getConferenceSid() {
        return this.conferenceSid;
    }

    /**
     * Returns The call_sid.
     *
     * @return The call_sid
     */
    public final String getCallSid() {
        return this.callSid;
    }

    /**
     * Returns The account_sid.
     *
     * @return The account_sid
     */
    public final String getAccountSid() {
        return this.accountSid;
    }

    /**
     * Returns The call_direction.
     *
     * @return The call_direction
     */
    public final ConferenceParticipant.CallDirection getCallDirection() {
        return this.callDirection;
    }

    /**
     * Returns The from.
     *
     * @return The from
     */
    public final String getFrom() {
        return this.from;
    }

    /**
     * Returns The to.
     *
     * @return The to
     */
    public final String getTo() {
        return this.to;
    }

    /**
     * Returns The call_state.
     *
     * @return The call_state
     */
    public final ConferenceParticipant.CallState getCallState() {
        return this.callState;
    }

    /**
     * Returns The country_code.
     *
     * @return The country_code
     */
    public final String getCountryCode() {
        return this.countryCode;
    }

    /**
     * Returns The is_moderator.
     *
     * @return The is_moderator
     */
    public final Boolean getIsModerator() {
        return this.isModerator;
    }

    /**
     * Returns The join_time.
     *
     * @return The join_time
     */
    public final ZonedDateTime getJoinTime() {
        return this.joinTime;
    }

    /**
     * Returns The leave_time.
     *
     * @return The leave_time
     */
    public final ZonedDateTime getLeaveTime() {
        return this.leaveTime;
    }

    /**
     * Returns The duration_seconds.
     *
     * @return The duration_seconds
     */
    public final Integer getDurationSeconds() {
        return this.durationSeconds;
    }

    /**
     * Returns The whisper.
     *
     * @return The whisper
     */
    public final String getWhisper() {
        return this.whisper;
    }

    /**
     * Returns The agent_audio.
     *
     * @return The agent_audio
     */
    public final Boolean getAgentAudio() {
        return this.agentAudio;
    }

    /**
     * Returns The outbound_queue_length.
     *
     * @return The outbound_queue_length
     */
    public final Integer getOutboundQueueLength() {
        return this.outboundQueueLength;
    }

    /**
     * Returns The outbound_time_in_queue.
     *
     * @return The outbound_time_in_queue
     */
    public final Integer getOutboundTimeInQueue() {
        return this.outboundTimeInQueue;
    }

    /**
     * Returns The jitter_buffer_size.
     *
     * @return The jitter_buffer_size
     */
    public final ConferenceParticipant.JitterBufferSize getJitterBufferSize() {
        return this.jitterBufferSize;
    }

    /**
     * Returns The is_coach.
     *
     * @return The is_coach
     */
    public final Boolean getIsCoach() {
        return this.isCoach;
    }

    /**
     * Returns The coached_participants.
     *
     * @return The coached_participants
     */
    public final List<String> getCoachedParticipants() {
        return this.coachedParticipants;
    }

    /**
     * Returns The participant_region.
     *
     * @return The participant_region
     */
    public final ConferenceParticipant.Region getParticipantRegion() {
        return this.participantRegion;
    }

    /**
     * Returns The conference_region.
     *
     * @return The conference_region
     */
    public final ConferenceParticipant.Region getConferenceRegion() {
        return this.conferenceRegion;
    }

    /**
     * Returns The call_type.
     *
     * @return The call_type
     */
    public final ConferenceParticipant.CallType getCallType() {
        return this.callType;
    }

    /**
     * Returns The quality_issues.
     *
     * @return The quality_issues
     */
    public final Integer getQualityIssues() {
        return this.qualityIssues;
    }

    /**
     * Returns The properties.
     *
     * @return The properties
     */
    public final Map<String, Object> getProperties() {
        return this.properties;
    }

    /**
     * Returns The events.
     *
     * @return The events
     */
    public final Map<String, Object> getEvents() {
        return this.events;
    }

    /**
     * Returns The metrics.
     *
     * @return The metrics
     */
    public final Map<String, Object> getMetrics() {
        return this.metrics;
    }

    /**
     * Returns The url.
     *
     * @return The url
     */
    public final URI getUrl() {
        return this.url;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        ConferenceParticipant other = (ConferenceParticipant) o;

        return Objects.equals(participantSid, other.participantSid) &&
               Objects.equals(label, other.label) &&
               Objects.equals(conferenceSid, other.conferenceSid) &&
               Objects.equals(callSid, other.callSid) &&
               Objects.equals(accountSid, other.accountSid) &&
               Objects.equals(callDirection, other.callDirection) &&
               Objects.equals(from, other.from) &&
               Objects.equals(to, other.to) &&
               Objects.equals(callState, other.callState) &&
               Objects.equals(countryCode, other.countryCode) &&
               Objects.equals(isModerator, other.isModerator) &&
               Objects.equals(joinTime, other.joinTime) &&
               Objects.equals(leaveTime, other.leaveTime) &&
               Objects.equals(durationSeconds, other.durationSeconds) &&
               Objects.equals(whisper, other.whisper) &&
               Objects.equals(agentAudio, other.agentAudio) &&
               Objects.equals(outboundQueueLength, other.outboundQueueLength) &&
               Objects.equals(outboundTimeInQueue, other.outboundTimeInQueue) &&
               Objects.equals(jitterBufferSize, other.jitterBufferSize) &&
               Objects.equals(isCoach, other.isCoach) &&
               Objects.equals(coachedParticipants, other.coachedParticipants) &&
               Objects.equals(participantRegion, other.participantRegion) &&
               Objects.equals(conferenceRegion, other.conferenceRegion) &&
               Objects.equals(callType, other.callType) &&
               Objects.equals(qualityIssues, other.qualityIssues) &&
               Objects.equals(properties, other.properties) &&
               Objects.equals(events, other.events) &&
               Objects.equals(metrics, other.metrics) &&
               Objects.equals(url, other.url);
    }

    @Override
    public int hashCode() {
        return Objects.hash(participantSid,
                            label,
                            conferenceSid,
                            callSid,
                            accountSid,
                            callDirection,
                            from,
                            to,
                            callState,
                            countryCode,
                            isModerator,
                            joinTime,
                            leaveTime,
                            durationSeconds,
                            whisper,
                            agentAudio,
                            outboundQueueLength,
                            outboundTimeInQueue,
                            jitterBufferSize,
                            isCoach,
                            coachedParticipants,
                            participantRegion,
                            conferenceRegion,
                            callType,
                            qualityIssues,
                            properties,
                            events,
                            metrics,
                            url);
    }
}